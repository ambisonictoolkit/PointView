TITLE:: PointView
summary:: An interactive view displaying a collection of points in 3D space.
categories:: GUI
related:: Classes/Cartesian, Classes/SphericalDesign

DESCRIPTION::
An interactive view displaying a collection of points in 3D space. Points are
link::Classes/Cartesian:: points (optionally specified as directional pairs of
code::[azimuth, elevation]::) rendered with adjustable 3D perspective or orthogonal
projection. Points can be displayed with colors (link::#-colorGroups::)
or connecting lines (link::#-connections::) to illustrate relationships between
them.

The view and rotation controls are most conveniently changed through the UI
built into the view, though these methods and more are available for more elaborate
display of the points.


CLASSMETHODS::

METHOD:: new
Create a new link::Classes/PointView::.

ARGUMENT:: parent
An optional parent link::Classes/View:: in which to embed the
link::Classes/PointView::.

ARGUMENT:: bounds
An optional link::Classes/Rect:: describing the bounds of the view.


INSTANCEMETHODS::

METHOD:: points
Set the link::Classes/Array:: of link::Classes/Cartesian:: points to display.
If code::resetConnections:: is code::false::, any previously set
link::#-connections:: will remain, otherwise the default connections will be set
to sequential indices code::[[0, 1, ... numPoints-1]]::.

METHOD:: directions
Set the directions of points to display. code::dirArray:: can be an
link::Classes/Array:: of:
LIST::
##link::Classes/Array::s in the form of
code::[[azimuth, inclination], [azimuth, inclination], ...]:: in radians,
where rho is assumed to be 1. i.e. points on a unit circle.
##link::Classes/Array::s in the form of
code::[[azimuth, inclination, rho], [azimuth, inclination, rho], ...]:: in
radians.
##link::Classes/Spherical:: objects.
::
If code::resetConnections:: is code::false::, any previously set
link::#-connections:: will remain, otherwise the default connections will be set
to sequential indices code::[[0, 1, ... numPoints-1]]::. Directions are
converted to link::Classes/Cartesian:: points internally.

METHOD:: connections
Set an link::Classes/Array:: of link::Classes/Array::s, each listing the indices of
points which should be connected by lines. If
code::update:: is code::true::, the connecting lines will immediately
be shown. Connections can be toggled on and off with link::#-showConnections::.
Default connections are set to sequential indices
code::[[0, 1, ... numPoints-1]]::.

METHOD:: connectTriplets
Set an link::Classes/Array:: of link::Classes/Array::s, each listing the indices of
points in groups of three that form a triangular mesh across the points. This
method is more efficient than setting connections to be the triplets directly,
because it avoids repeated connections.


SUBSECTION::Movement: rotation

METHOD:: rotate
METHOD:: tilt
METHOD:: tumble
The rotation of the displayed points, on each axis, in radians. Default positive directions
are:
list::
##strong::rotate::: counter-clockwise
##strong::tilt::: left-up
##strong::tumble::: front-up
::

METHOD:: rotateDir
METHOD:: tiltDir
METHOD:: tumbleDir
METHOD:: allDir
A flag to specify the direction of rotation on each or all axes. A
code::dir:: of code::1:: will select the default direction for that axis (see
above) while code::-1:: will invert the direction of rotation.

METHOD:: reset
Reset rotations to defaults. (code::rotate = -45.degrad, tilt = 0, tumble = 0::)

METHOD:: rotateMode
Set the order of rotations when applying compound rotations to the points.
code::'rtt':: for Rotate-Tilt-Tumble, code::'ypr':: Yaw-Pitch-Roll.


SUBSECTION::Movement: animation

METHOD:: rotateOsc
METHOD:: tiltOsc
METHOD:: tumbleOsc
METHOD:: allOsc
A link::Classes/Boolean:: flag stating whether the display (including axes) will
oscillate around each axis or all axes.

METHOD:: rotateOscPeriod
METHOD:: tiltOscPeriod
METHOD:: tumbleOscPeriod
METHOD:: allOscPeriod
The period of oscillation on each axis or all axes, in seconds.

METHOD:: rotateOscWidth
METHOD:: tiltOscWidth
METHOD:: tumbleOscWidth
METHOD:: allOscWidth
Set the oscillation width of each axis or all axes, in radians.

METHOD:: rotateCyc
METHOD:: tiltCyc
METHOD:: tumbleCyc
METHOD:: allCyc
A link::Classes/Boolean:: flag stating whether the display (including axes) will
rotate cyclically around each axis or all axes.

METHOD:: rotateCycPeriod
METHOD:: tiltCycPeriod
METHOD:: tumbleCyclePeriod
METHOD:: allCycPeriod
The cycle period of each axis or all axes, in seconds.

METHOD:: rotateCycRate
METHOD:: tiltCycRate
METHOD:: tumbleCycRate
METHOD:: allCycRate
The cycle period of each axis or all axes, in Hertz.

METHOD:: varyMotion
Set an code::axis:: (code::'rotate'::, code::'tilt'::, or code::'tumble'::)
with a link::Classes/Boolean:: flag to randomize its motion, if it's
oscillating or cycling.

METHOD:: randomVariance
Set the random variance applied to those axes for which link::#-varyMotion::
 is code::true::. The value of variance is normalized to the phase increment of
each frame, so a variance of code::0:: has no effect, while a variance of
code::1:: could potentially step twice as far (twice as fast) on each frame.
Default is code::0.15::.

METHOD:: frameRate
Set the framerate of the animation if the view is set to cycle
(link::#-rotateCyc::) or oscillate (link::#-rotateOsc::).


SUBSECTION::View options

METHOD:: pointColors
code::arrayOfColors:: can be a single link::Classes/Color::,
link::Classes/Array:: of link::Classes/Color::s. If
code::(arrayOfColors.size != numPoints)::, points will wrap through the
color array.

METHOD:: pointHueRange
Set the points to colors within a hue range. code::hueLow:: and code::hueHigh::
are code::0 <= hue < 1::. Optionally specify saturation, value, and alpha, which
are bound as in link::Classes/Color#*hsv::. If code::scramble:: is
code::true::, the colors will be randomly distributed among the points instead
of hues ascending with index.

METHOD:: groupColors
code::arrayOfColors:: can be a single link::Classes/Color::,
link::Classes/Array:: of link::Classes/Color::s. If
code::(colorGroups.size != groupColors.size)::, groups will wrap through the
color array. Indices not listed in the link::#-colorGroups:: will be assigned
the code::defaultColor::.

METHOD:: colorGroups
An link::Classes/Array:: of link::Classes/Array::s containing point indices
to be set to each of the link::#-groupColors::. If
code::(colorGroups.size != groupColors.size)::, groups will wrap through the
link::#-groupColors:: array. Indices not listed in the
link::#-colorGroups:: will be assigned the code::defaultColor::.

METHOD:: showConnections
A link::Classes/Boolean:: toggling the connection lines on and off.
link::#-connections:: must be set.

METHOD:: connectionColor
The link::Classes/Color:: of the lines showing the link::#-connections::.

METHOD:: connectionStrokeWidth
The stroke width of connection lines in pixels. The farthest connection line
widths will be scaled by link::#-pointDistScale::.

METHOD:: showAxes
A link::Classes/Boolean:: flag stating whether the display the axes at the origin.
The length of the axes can be set with link::#-axisScale::.

METHOD:: axisColors
A 3-element link::Classes/Array:: of link::Classes/Color::s in the order
code::[x,y,z]::.

METHOD:: axisScale
Adjust the length of the axes. code::scale:: of code::1:: makes the axes as long
as the distance to the outermost point. Show/hide the axes with
link::#-showAxes::.

METHOD:: showIndices
A link::Classes/Boolean:: flag indicating whether to display the point indices
or not.

METHOD:: indicesColor
Set the link::Classes/Color:: of the text of the points' indices.

METHOD:: pointSize
The diameter of the points, in pixels. If link::#-renderDistanceSize:: is
code::true::, the nearest point will be the specified size;

METHOD:: highlightPoints
Provide emphasis on specific points in the view through color.

ARGUMENT:: arrayOfIndices
An link::Classes/Array:: of indices of the points to render in
code::highlightColor::.

ARGUMENT:: highlightColor
The link::Classes/Color:: for highlighted points. Default
code::Color.red::.

ARGUMENT:: defaultColor
The link::Classes/Color:: for non-highlighted points. Default
code::Color.gray.alpha_(0.25)::.

METHOD:: removeHighlight
Restore the points' colors to the state before they were set to
link::#-highlightPoints::.

METHOD:: units
Set the units, code::'radians':: or code::'degrees'::, used by the GUI.


SUBSECTION::Perspective

METHOD:: setOrtho
Set the view to a flat orthographic projection along code::axis::. This is
useful for displaying symmetry of points through a plane.

ARGUMENT:: axis
Avaible args: code::'+X', '-X', '+Y', '-Y', '+Z', '-Z'::. The sign indicates the
direction you're looking.

ARGUMENT:: offset
Optionally offset the plane of projection by a radian amount. For example, some
spherical designs will have interesting symmetry along a code::45.degrad:: plane.

METHOD:: setPerspective
Set the view to render the points in perspective (as opposed to an orthogonal
view).

METHOD:: translateX
Translate the origin of the display on the X axis. A code::norm:: of code::-1:: and
code::1::, is far left and right of the view, respectively.

METHOD:: translateY
Translate the origin of the display on the Y axis. A code::norm:: of code::-1:: and
code::1::, is bottom and top of the view, respectively.

METHOD:: skewX
Skew the perspective along the screen's X axis. A useful range of
code::norm:: is 0 to 1.

METHOD:: skewY
Skew the perspective along the screen's Y axis. A useful range of
code::norm:: is 0 to 1.

METHOD:: originDist
Move the origin of your points closer or farther from the screen.
A useful range for code::norm:: values is about code::-0.5:: (close) to
code::3:: (far), but it depends also on the link::#-eyeDist::.

METHOD:: eyeDist
A value which makes the the depth of the perspective more or less pronounced,
qualitatively similar to moving your eye or a lens nearer or farther from your
points. Useful code::norm:: values in a range of code::1.5:: (more warped) to
code::6:: (less) are reasonable, but it depends also on the link::#-originDist::.

METHOD:: renderDistanceSize
A link::Classes/Boolean:: to determine if point size changes with distance to
enhance 3D effect.

METHOD:: pointDistScale
Scale the size of the points with distance. A code::norm:: of code::0.5:: would
scale the farthest point to be one half the size of the nearest point.

METHOD:: refresh
Refresh the view. Most methods which change render settings refresh the view
automatically.


SUBSECTION:: Internal properties

METHOD:: userView
Returns the link::Classes/UserView:: which is used for drawing the point display.

METHOD:: pointsNorm
Return the link::Classes/Array:: of link::Classes/Cartesian:: points used
internally for plotting. i.e. normalized to a radius of 1.


EXAMPLES::

code::
(
// directions of a 13-point t-design
var dirs = [
	[ 0.0, 1.571 ], [ 0.0, 0.564 ], [ 1.571, 0.564 ],
	[ 3.142, 0.564 ], [ -1.571, 0.564 ], [ 0.0, -0.046 ],
	[ -1.571, -0.046 ], [ 3.142, -0.046 ], [ 1.571, -0.046 ],
	[ 0.0, -0.831 ], [ -1.571, -0.831 ], [ 3.142, -0.831 ],
	[ 1.571, -0.831 ]
];

~pv = PointView().directions_(dirs).front
)

(
// highlight all points above the horizon
var highPnts = ~pv.points.selectIndices{ |pnt| pnt.z > 0 };
~pv.highlightPoints(highPnts, Color.yellow);
)

// remove the highlight
~pv.removeHighlight;

// connect points with lines
~pv.connections_((0 .. ~pv.points.size-1).clump(2))

(
// ...or connect points that form a triangular mesh.
// This method is more efficient than setting
// connections to be the triplets directly, because
// some connections will be repeated
~pv.connectTriplets_([
	[ 0, 1, 2 ], [ 0, 1, 4 ], [ 0, 2, 3 ],
	[ 0, 3, 4 ], [ 1, 2, 8 ], [ 1, 4, 6 ],
	[ 1, 5, 6 ], [ 1, 5, 8 ], [ 2, 3, 7 ],
	[ 2, 7, 8 ], [ 3, 4, 6 ], [ 3, 6, 7 ],
	[ 5, 6, 10 ], [ 5, 8, 12 ], [ 5, 9, 10 ],
	[ 5, 9, 12 ], [ 6, 7, 11 ], [ 6, 10, 11 ],
	[ 7, 8, 12 ], [ 7, 11, 12 ], [ 9, 10, 11 ],
	[ 9, 11, 12 ]
])
)

// set random point colors
~pv.pointColors_(~pv.points.size.collect{ Color.rand })
// set point colors to a hue range
~pv.pointHueRange_(0.75, 0.95);

// group points by color
~pv.colorGroups_([(0..4),(5..8),(9..12)])
// need to set the group colors...
~pv.groupColors_([Color.red, Color.green, Color.yellow])

// rotate the perspective
~pv.rotate_(25.degrad)
~pv.tumble_(45.degrad)
~pv.reset

// orthographic projection down the Z axis
~pv.setOrtho('-Z')
// back to perspective view
~pv.setPerspective

~pv.showConnections = false;

// more options can be explored in the GUI!

::

PRIVATE:: perspectiveView, drawFunc, makePerspectiveView, baseTilt, baseRotation, baseTumble, cen, rotatePhase, rotationView, cycTilt, cycRotate, cycTumble, oscTilt, oscRotate, oscTumble, prUpdateColors, randomizedAxes, prCheckAnimate, showView, initInteractions, makeShowView, rotatePhase, tiltPhase, tumblePhase, minDim, update, updateCanvasDims, layItOut, rotateStep, init, reduceTriplets
